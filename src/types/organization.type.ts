import { EmployeeCountRange } from "./company.type.js"
import { FullLocation } from "./location.type.js"
import { LinkedMediaProcessorImage, LinkedVectorImage } from "./image.type.js"

/** School or Company */
export interface RawOrganization {
    name: string
    universalName: string
    tagline: string
    description: string
    entityUrn: string
    url: string
    staffingCompany: boolean
    companyIndustries: Industry[]
    staffCount: number
    callToAction?: {
      callToActionType: string
      visible: boolean
      callToActionMessage: {
        textDirection: string
        text: string
      }
      url: string
    }
    companyEmployeesSearchPageUrl: string
    viewerFollowingJobsUpdates: boolean
    school?: string
    staffCountRange: EmployeeCountRange
    permissions: {
      landingPageAdmin: boolean
      admin: boolean
      adAccountHolder: boolean
    }
    logo: {
      image: LinkedVectorImage
      type: string
    }
    claimable: boolean
    specialities: string[]
    confirmedLocations: FullLocation[]
    followingInfo: FollowingInfo
    viewerEmployee: boolean
    lcpTreatment: boolean
    phone?: {
      number: string
    }
    $recipeType: string
    fundingData: FundingData
    overviewPhoto: LinkedMediaProcessorImage
    coverPhoto: LinkedMediaProcessorImage
    multiLocaleTaglines: {
      localized: {
        en_US: string
      }
      preferredLocale: {
        country: string
        language: string
      }
    }
    headquarter?: FullLocation
    paidCompany: boolean
    viewerPendingAdministrator: boolean
    companyPageUrl: string
    viewerConnectedToAdministrator: boolean
    dataVersion: number
    foundedOn: {
      year: number
    }
    companyType: {
      localizedName: string
      code: string
    }
    claimableByViewer: boolean
    jobSearchPageUrl: string
    showcase: boolean
    autoGenerated: boolean
    backgroundCoverImage?: {
      image: LinkedVectorImage
      cropInfo: {
        x: number
        y: number
        width: number
        height: number
      }
    }
    affiliatedCompanies: string[]
    affiliatedCompaniesResolutionResults?: Record<string, RawAffiliatedCompany>
    affiliatedCompaniesWithEmployeesRollup: string[]
    affiliatedCompaniesWithJobsRollup: string[]
    associatedHashtags: string[]
    associatedHashtagsResolutionResults?: Record<string, RawAssociatedHashtag>
    groups: string[]
    groupsResolutionResults?: Record<string, RawGroup>
    showcasePages: string[]
    showcasePagesResolutionResults?: Record<string, RawShowcasePage>
  }
  
  export interface RawOrganizationResponse {
    elements: RawOrganization[]
  }


/** School or Company */
export type Organization = Omit<
  RawOrganization,
  | 'universalName'
  | 'logo'
  | 'backgroundCoverImage'
  | 'coverPhoto'
  | 'overviewPhoto'
  | '$recipeType'
  | 'callToAction'
  | 'phone'
  | 'permissions'
  | 'followingInfo'
  | 'adsRule'
  | 'autoGenerated'
  | 'lcpTreatment'
  | 'staffingCompany'
  | 'showcase'
  | 'paidCompany'
  | 'claimable'
  | 'claimableByViewer'
  | 'viewerPendingAdministrator'
  | 'viewerConnectedToAdministrator'
  | 'viewerFollowingJobsUpdates'
  | 'viewerEmployee'
  | 'associatedHashtags'
  | 'associatedHashtagsResolutionResults'
  | 'affiliatedCompaniesResolutionResults'
  | 'groupsResolutionResults'
  | 'showcasePagesResolutionResults'
> & {
  id: string
  publicIdentifier: string
  logo?: string
  backgroundCoverImage?: string
  coverPhoto?: string
  overviewPhoto?: string
  callToActionUrl?: string
  phone?: string
  numFollowers?: number
  affiliatedCompaniesResolutionResults: Record<string, AffiliatedCompany>
  groupsResolutionResults: Record<string, Group>
  showcasePagesResolutionResults: Record<string, ShowcasePage>
}

export interface FundingData {
    fundingRoundListCrunchbaseUrl: string
    lastFundingRound: {
      investorsCrunchbaseUrl: string
      leadInvestors: {
        name: {
          text: string
        }
        investorCrunchbaseUrl: string
        image: {
          attributes: {
            sourceType: string
            imageUrl: string
          }[]
        }
      }[]
      fundingRoundCrunchbaseUrl: string
      fundingType: string
      moneyRaised: {
        currencyCode: string
        amount: string
      }
      numOtherInvestors: number
      announcedOn: {
        month: number
        day: number
        year: number
      }
    }
    companyCrunchbaseUrl: string
    numFundingRounds: number
    updatedAt: number
  }

  export interface RawShowcasePage {
    entityUrn: string
    name: string
    universalName: string
    description: string
    url: string
    followingInfo: {
      entityUrn: string
      following: boolean
      dashFollowingStateUrn: string
      followingType: string
      followerCount: number
    }
    companyIndustries: Industry[]
    logo: {
      image: LinkedVectorImage
      type: string
    }
    paidCompany: boolean
    showcase: boolean
    $recipeType: string
  }
  
  export type ShowcasePage = Omit<
    RawShowcasePage,
    | 'universalName'
    | 'logo'
    | '$recipeType'
    | 'followingInfo'
    | 'showcase'
    | 'paidCompany'
  > & {
    id: string
    publicIdentifier: string
    logo?: string
    numFollowers?: number
  }

  export interface Industry {
    localizedName: string
    entityUrn: string
  }
  
  export interface FollowingInfo {
    entityUrn: string
    following: boolean
    dashFollowingStateUrn: string
    followingType: string
    followerCount: number
  }
  
  export interface RawAffiliatedCompany {
    entityUrn: string
    name: string
    universalName: string
    url: string
    description: string
    followingInfo: FollowingInfo
    companyIndustries: Industry[]
    school: string
    logo: {
      image: LinkedVectorImage
      type: string
    }
    paidCompany: boolean
    showcase: boolean
    $recipeType: string
  }
  
  export type AffiliatedCompany = Omit<
    RawAffiliatedCompany,
    | 'universalName'
    | 'logo'
    | '$recipeType'
    | 'followingInfo'
    | 'showcase'
    | 'paidCompany'
  > & {
    id: string
    publicIdentifier: string
    logo?: string
    numFollowers?: number
  }
  
  export interface RawAssociatedHashtag {
    entityUrn: string
    feedTopic: {
      topic: {
        name: string
        trending: boolean
        recommendationTrackingId: string
        useCase: string
        backendUrn: string
      }
      entityUrn: string
      tracking: {
        trackingId: string
      }
    }
    $recipeType: string
    followAction: {
      followingInfo: FollowingInfo
      unfollowTrackingActionType: string
      followTrackingActionType: string
      trackingActionType: string
      type: string
    }
  }


export interface RawGroup {
    groupName: string
    entityUrn: string
    memberCount: number
    logo: LinkedVectorImage
    url: string
    $recipeType: string
  }
  
  export type Group = Omit<RawGroup, 'logo' | '$recipeType'> & {
    id: string
    logo?: string
  }
  
